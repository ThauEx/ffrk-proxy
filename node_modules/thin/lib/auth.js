/*!
 * basic-auth
 * Copyright(c) 2013 TJ Holowaychuk
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * Modified version of https://github.com/jshttp/basic-auth
 * MIT Licensed
 */

'use strict'

/**
 * RegExp for basic auth credentials
 *
 * credentials = auth-scheme 1*SP token68
 * auth-scheme = "Basic" ; case insensitive
 * token68     = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" ) *"="
 * @private
 */
var credentialsRegExp = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9\-\._~\+\/]+=*) *$/;

/**
 * RegExp for basic auth user/pass
 *
 * user-pass   = userid ":" password
 * userid      = *<TEXT excluding ":">
 * password    = *TEXT
 * @private
 */
var userPassRegExp = /^([^:]*):(.*)$/;

/**
 * Parse the Authorization header field of a request.
 *
 * @param {object} req
 * @return {object} with .username and .password
 * @public
 */

module.exports = function auth(req, mode) {
  if (!req) {
    throw new TypeError('argument req is required')
  }

  var authHeader = 'authorization';

  if (mode && mode.toLowerCase() == 'proxy') {
    authHeader = 'proxy-authorization';
  }

  // Get header
  var header = (req.req || req).headers[authHeader]

  // Parse header
  var match = credentialsRegExp.exec(header || '')

  if (!match) {
    return
  }

  // Decode user pass
  var userPass = userPassRegExp.exec(decodeBase64(match[1]))

  if (!userPass) {
    return
  }

  // Return credentials object
  return new Credentials(userPass[1], userPass[2])
}

/**
 * Decode base64 string.
 * @private
 */

function decodeBase64(str) {
  return new Buffer(str, 'base64').toString()
}

/**
 * Object to represent user credentials.
 * @private
 */

function Credentials(username, password) {
  this.username = username
  this.password = password
}

Credentials.prototype.checkAuthFromList = function(authList) {
  for (var i = 0; i < authList.length; i++) {
    if (authList[i].username === this.username && authList[i].password === this.password) {
      return true;
    }
  }

  return false;
}